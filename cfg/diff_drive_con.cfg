#!/usr/bin/env python
#
# Created By: Jeovanny Reyes
# Created On: 6/13/18
#
# Purpose: This configuration file is used to create the parameters that will be changed on-the-go as Melo moves!
# Dynamically Reconfigurable Parameters (Double Data Type):
#                                           Left_Forward_Scale -> Velocity scale of left wheel going forward
#                                           Right_Forward_Scale -> Velocity scale of right wheel going forward
#                                           Left_Backward_Scale -> Velocity scale of left wheel going backward [May not need!]
#                                           Right_Backward_Scale -> Velocity scale of right wheel going backward [May not need!]
#
# Cal State LA Robotics Laboratory
#

PACKAGE = "teleop"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# Current data types supported for dynamic_reconfigure: int_t, double_t, str_t, or bool_t
#gen.add("Name of Parameter",  data type,    level (set to 0), Description of Parameter, Default Value,  Min, Max)
gen.add("Left_Forward_Scale", double_t, 0, "Parameter to adjust left wheel speed", 0.50, 0.05, 1.00)
gen.add("Right_Forward_Scale", double_t, 0, "Parameter to adjust right wheel speed", 0.50, 0.05, 1.00)
gen.add("Left_Backward_Scale", double_t, 0, "Parameter to adjust left wheel speed", 0.50, 0.05, 1.00) # May or may not need this!
gen.add("Right_Backward_Scale", double_t, 0, "Parameter to adjust right wheel speed", 0.50, 0.05, 1.00) # May or may not need this!

# size_enum = gen.enum([ gen.const("Small",      int_t, 0, "A small constant"),
#                        gen.const("Medium",     int_t, 1, "A medium constant"),
#                        gen.const("Large",      int_t, 2, "A large constant"),
#                        gen.const("ExtraLarge", int_t, 3, "An extra large constant")],
#                      "An enum to set size")
#
# gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)

exit(gen.generate(PACKAGE, "diff_drive", "diff_drive_con"))
